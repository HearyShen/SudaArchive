; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	E:\Heary's\【大学相关】\2016_2\汇编语言程序设计 杨季文\ex\ex51_c\1427405017_ex51_c.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BM@HCFFNIDP@ex51_c?6?G?k?J?d?H?k?R?$LL?$LI?v?J?$KO?$LN?x?V?F?J?$PN?$KD?$LK?$AA@ ; `string'
PUBLIC	??_C@_0BH@IDHPCBCE@?$LI?C?J?$KO?$LN?x?V?F?J?$PN?V?$LF?$LF?D?R?r?W?S?N?$KK?$KD?$LK?$AA@ ; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__gets_s:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__itoa:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IDHPCBCE@?$LI?C?J?$KO?$LN?x?V?F?J?$PN?V?$LF?$LF?D?R?r?W?S?N?$KK?$KD?$LK?$AA@
CONST	SEGMENT
??_C@_0BH@IDHPCBCE@?$LI?C?J?$KO?$LN?x?V?F?J?$PN?V?$LF?$LF?D?R?r?W?S?N?$KK?$KD?$LK?$AA@ DB 0b8H
	DB	0c3H, 0caH, 0aeH, 0bdH, 0f8H, 0d6H, 0c6H, 0caH, 0fdH, 0d6H, 0b5H
	DB	0b5H, 0c4H, 0d2H, 0f2H, 0d7H, 0d3H, 0ceH, 0aaH, 0a3H, 0baH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HCFFNIDP@ex51_c?6?G?k?J?d?H?k?R?$LL?$LI?v?J?$KO?$LN?x?V?F?J?$PN?$KD?$LK?$AA@
CONST	SEGMENT
??_C@_0BM@HCFFNIDP@ex51_c?6?G?k?J?d?H?k?R?$LL?$LI?v?J?$KO?$LN?x?V?F?J?$PN?$KD?$LK?$AA@ DB 'e'
	DB	'x51_c', 0aH, 0c7H, 0ebH, 0caH, 0e4H, 0c8H, 0ebH, 0d2H, 0bbH, 0b8H
	DB	0f6H, 0caH, 0aeH, 0bdH, 0f8H, 0d6H, 0c6H, 0caH, 0fdH, 0a3H, 0baH
	DB	00H						; `string'
CONST	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT ??$gets_s@$0BE@@@YAPADAAY0BE@D@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
??$gets_s@$0BE@@@YAPADAAY0BE@D@Z PROC			; gets_s<20>, COMDAT

; 310  :     char, _Buffer)

	push	ebp
	mov	ebp, esp

; 308  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0(

	push	20					; 00000014H
	push	DWORD PTR __Buffer$[ebp]
	call	DWORD PTR __imp__gets_s
	pop	ecx
	pop	ecx
	pop	ebp
	ret	0
??$gets_s@$0BE@@@YAPADAAY0BE@D@Z ENDP			; gets_s<20>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File e:\heary's\【大学相关】\2016_2\汇编语言程序设计 杨季文\ex\ex51_c\1427405017_ex51_c.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File e:\heary's\【大学相关】\2016_2\汇编语言程序设计 杨季文\ex\ex51_c\1427405017_ex51_c.cpp
;	COMDAT _main
_TEXT	SEGMENT
_num$1$ = -228						; size = 4
_str_out$ = -224					; size = 200
_str_in$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 26   : 	puts("ex51_c\n请输入一个十进制数：");

	push	OFFSET ??_C@_0BM@HCFFNIDP@ex51_c?6?G?k?J?d?H?k?R?$LL?$LI?v?J?$KO?$LN?x?V?F?J?$PN?$KD?$LK?$AA@
	xor	esi, esi
	call	DWORD PTR __imp__puts
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 308  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0(

	lea	eax, DWORD PTR _str_in$[ebp]
	push	20					; 00000014H
	push	eax
	call	DWORD PTR __imp__gets_s
; File e:\heary's\【大学相关】\2016_2\汇编语言程序设计 杨季文\ex\ex51_c\1427405017_ex51_c.cpp

; 29   : 	num = atoi(str_in);

	lea	eax, DWORD PTR _str_in$[ebp]
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 16					; 00000010H
	mov	DWORD PTR _num$1$[ebp], eax

; 30   : 	for (int i=num; i > 0; i--)

	mov	edi, eax
	test	eax, eax
	jle	SHORT $LN3@main

; 24   : 	char str_in[MAX_LENGTH], str_out[MAX_LENGTH][10];
; 25   : 	unsigned int num = 0, factors_count = 0;

	push	ebx
	lea	ebx, DWORD PTR _str_out$[ebp]
$LL4@main:

; 31   : 	{
; 32   : 		if (num%i == 0)

	xor	edx, edx
	div	edi
	test	edx, edx
	jne	SHORT $LN2@main

; 33   : 		{
; 34   : 			itoa(i, str_out[factors_count++], 10);

	push	10					; 0000000aH
	push	ebx
	push	edi
	call	DWORD PTR __imp__itoa
	add	esp, 12					; 0000000cH
	inc	esi
	add	ebx, 10					; 0000000aH
$LN2@main:

; 30   : 	for (int i=num; i > 0; i--)

	mov	eax, DWORD PTR _num$1$[ebp]
	dec	edi
	test	edi, edi
	jg	SHORT $LL4@main
	pop	ebx
$LN3@main:

; 35   : 		}
; 36   : 	}
; 37   : 
; 38   : 	puts("该十进制数值的因子为：");

	push	OFFSET ??_C@_0BH@IDHPCBCE@?$LI?C?J?$KO?$LN?x?V?F?J?$PN?V?$LF?$LF?D?R?r?W?S?N?$KK?$KD?$LK?$AA@
	call	DWORD PTR __imp__puts
	pop	ecx

; 39   : 	for (unsigned int i = 0; i < factors_count; i++)

	test	esi, esi
	je	SHORT $LN6@main

; 35   : 		}
; 36   : 	}
; 37   : 
; 38   : 	puts("该十进制数值的因子为：");

	lea	edi, DWORD PTR _str_out$[ebp]
$LL7@main:

; 40   : 	{
; 41   : 		printf("%s ", str_out[i]);

	push	edi
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	call	_printf
	pop	ecx
	add	edi, 10					; 0000000aH
	pop	ecx
	sub	esi, 1
	jne	SHORT $LL7@main
$LN6@main:

; 42   : 	}
; 43   : 	printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	pop	ecx

; 44   : 
; 45   : 	return 0;
; 46   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	eax, eax
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);
; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H

; 955  :     __crt_va_end(_ArgList);
; 956  :     return _Result;
; 957  : }

	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __Stream$[ebp]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 640  : }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
